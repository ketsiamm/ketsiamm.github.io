---
title: "semester_personal_project"
subtitle: "[]"
date: "`r format(Sys.time(), '%B %d, %Y')`"
execute:
  keep-md: true
  df-print: paged
  warning: false
format:
  html:
    code-fold: true
    code-line-numbers: true
---



```{r}
#| warning: false

library(readr)
library(lubridate)
library(tidyverse)
```

```{r}
# Read the tab-delimited txt file with error handling
df <- read_tsv('FLAT_INV.txt', col_names = FALSE, trim_ws = TRUE, na = character())

# Assign column names based on the data dictionary
names(df) <- c('NHTSA_ACTION_NUMBER', 'MAKE', 'MODEL', 'YEAR', 'COMPNAME', 'MFR_NAME', 'ODATE', 'CDATE', 'CAMPNO', 'SUBJECT', 'SUMMARY')


# changing the date time variable to datetime data type

df$ODATE <- as.character(ymd(df$ODATE))

df$CDATE <- as.character(ymd(df$CDATE))

df<- na.omit(df)


# Write the data to a csv file
write_csv(df, 'FLAT_INV.csv')



```




```{r}

library(plotly)

# Convert YEAR to numeric
df$YEAR <- as.numeric(df$YEAR)

# Filter out invalid years
df_filtered <- df %>% filter(YEAR != 9999 & !is.na(YEAR))

# Calculate the maximum number of investigations in a single year for annotation
max_investigations <- df_filtered %>% count(YEAR) %>% summarize(max(n)) %>% pull()

# Create ggplot object
p <- ggplot(df_filtered, aes(x = YEAR)) +
  geom_bar(aes(fill = YEAR), color = "black", alpha = 0.8) +
  scale_fill_gradient(low = "skyblue", high = "darkblue") +
  scale_x_continuous(breaks = seq(min(df_filtered$YEAR), max(df_filtered$YEAR), by = 5)) +
  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +
  labs(title = "Number of Investigations by Year",
       subtitle = "NHTSA Safety-Related Defect Investigations",
       x = "Year",
       y = "Number of Investigations",
       caption = "Data Source: NHTSA") +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 20, face = "bold"),
    plot.subtitle = element_text(hjust = 0.5, size = 16, face = "italic"),
    axis.title.x = element_text(size = 14, face = "bold"),
    axis.title.y = element_text(size = 14, face = "bold"),
    axis.text = element_text(size = 12),
    axis.text.x = element_text(angle = 45, hjust = 1),
    panel.grid.major = element_line(size = 0.1, linetype = 'solid', color = "gray80"),
    panel.grid.minor = element_blank(),
    plot.caption = element_text(size = 10, face = "italic")
  ) +
  geom_vline(xintercept = 2023, linetype = "dashed", color = "red", size = 1) +
  annotate("text", x = 2023, y = max_investigations, label = "2023", vjust = -1, color = "red", fontface = "bold", size = 4)

# Convert to interactive plot
interactive_plot <- ggplotly(p)

# Print interactive plot
interactive_plot



```

```{r}

# Count investigations by MAKE
make_counts <- df %>%
  group_by(MAKE) %>%
  summarise(count = n()) %>%
  arrange(desc(count)) %>%
  top_n(10)

# Plot
p2 <- ggplot(make_counts, aes(x = reorder(MAKE, count), y = count)) +
  geom_bar(stat = "identity", aes(fill = MAKE), color = "black", alpha = 0.8) +
  scale_fill_brewer(palette = "Set3") +
  labs(title = "Top 10 Vehicle/Equipment Makes with Most Investigations",
       subtitle = "NHTSA Safety-Related Defect Investigations",
       x = "Make",
       y = "Number of Investigations",
       caption = "Data Source: NHTSA") +
  coord_flip() + 
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 20, face = "bold"),
    plot.subtitle = element_text(hjust = 0.5, size = 16, face = "italic"),
    axis.title.x = element_text(size = 14, face = "bold"),
    axis.title.y = element_text(size = 14, face = "bold"),
    axis.text = element_text(size = 12),
    axis.text.x = element_text(size = 12),
    axis.text.y = element_text(size = 12),
    panel.grid.major = element_line(size = 0.1, linetype = 'solid', color = "gray80"),
    panel.grid.minor = element_blank(),
    plot.caption = element_text(size = 10, face = "italic"),
    legend.position = "none"
  ) +
  geom_text(aes(label = count), hjust = -0.2, size = 5, color = "black")

# Convert to interactive plot
interactive_plot <- ggplotly(p2)

# Print interactive plot
interactive_plot
```

```{r}
library(dplyr)
library(ggplot2)
library(plotly)

# Group by SUBJECT and count the number of investigations
subject_counts <- df %>%
  group_by(SUBJECT) %>%
  summarise(count = n()) %>%
  arrange(desc(count)) %>%
  top_n(10)

# Create a ggplot object
p <- ggplot(subject_counts, aes(x = reorder(SUBJECT, count), y = count)) +
  geom_bar(stat = "identity", fill = "purple", color = "black", alpha = 0.8) +
  labs(title = "Top 10 Investigation Subjects",
       x = "Subject",
       y = "Number of Investigations",
       caption = "Data Source: NHTSA") +
  coord_flip() +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 20, face = "bold"),
    axis.title = element_text(size = 14, face = "bold"),
    axis.text = element_text(size = 12),
    plot.caption = element_text(size = 10, face = "italic")
  ) +
  geom_text(aes(label = count), hjust = -0.2, size = 5, color = "black")

# Convert ggplot object to plotly
p_plotly <- ggplotly(p)

# Display the interactive plot with a slider
p_plotly



```

```{r}
library(dplyr)
library(ggplot2)
library(plotly)

# Prepare data
subject_counts <- df %>%
  group_by(SUBJECT) %>%
  summarise(count = n()) %>%
  arrange(desc(count))

# Define a function to create the plot data for a given number of top subjects
create_plot_data <- function(n) {
  top_subjects <- subject_counts %>%
    top_n(n, count)
  list(
    x = reorder(top_subjects$SUBJECT, top_subjects$count),
    y = top_subjects$count,
    text = paste("Count: ", top_subjects$count, "<br>Subject: ", top_subjects$SUBJECT)
  )
}

# Initial plot data for the top 10 subjects
initial_data <- create_plot_data(10)

# Create a plotly object with a slider for interactive top subjects
fig <- plot_ly() %>%
  add_trace(
    type = "bar",
    x = initial_data$x,
    y = initial_data$y,
    text = initial_data$text,
    hoverinfo = "text",
    marker = list(color = "purple", line = list(color = "black", width = 1)),
    textposition = "outside"
  ) %>%
  layout(
    title = list(
      text = "Top Investigation Subjects with Slider",
      font = list(size = 24, family = "Arial, sans-serif", color = "black")
    ),
    xaxis = list(
      title = "Subject",
      titlefont = list(size = 18, family = "Arial, sans-serif", color = "black"),
      tickfont = list(size = 14, family = "Arial, sans-serif", color = "black"),
      automargin = TRUE,
      showgrid = TRUE,
      gridcolor = 'lightgray'
    ),
    yaxis = list(
      title = "Number of Investigations",
      titlefont = list(size = 18, family = "Arial, sans-serif", color = "black"),
      tickfont = list(size = 14, family = "Arial, sans-serif", color = "black"),
      showgrid = TRUE,
      gridcolor = 'lightgray'
    ),
    showlegend = FALSE,
    sliders = list(
      list(
        active = 9, # Starts with the top 10 subjects
        currentvalue = list(prefix = "Top ", visible = TRUE, xanchor = "right"),
        pad = list(b = 10),
        steps = lapply(1:nrow(subject_counts), function(n) {
          list(
            method = "restyle",
            args = list(
              list(
                x = list(create_plot_data(n)$x),
                y = list(create_plot_data(n)$y),
                text = list(create_plot_data(n)$text)
              )
            ),
            label = as.character(n)
          )
        })
      )
    ),
    plot_bgcolor = "white",
    paper_bgcolor = "white",
    margin = list(t = 50, b = 50, l = 100, r = 100),
    font = list(family = "Arial, sans-serif", size = 14, color = "black")
  )

# Display the interactive plot
fig

```